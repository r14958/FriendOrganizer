<UserControl x:Class="FriendOrganizer.UI.View.NavigationView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:FriendOrganizer.UI.View"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <Grid>
        <ScrollViewer VerticalScrollBarVisibility="Auto"
                      HorizontalScrollBarVisibility="Auto">
            
            <!--ItemsControl present a collection items (without selecting anything like would a ListView).-->
            <!--It is bound to a collection of Friends, which is actually a collection of NavigationItemViewModels-->
            <ItemsControl Grid.Column="0" 
                          ItemsSource="{Binding Friends}">
                <ItemsControl.ItemContainerStyle>
                    <Style TargetType="ContentPresenter">
                        <Setter Property="HorizontalAlignment" Value="Left"/>
                        <Setter Property="Margin" Value="3,1,3,1"/>
                    </Style>
                </ItemsControl.ItemContainerStyle>
                <!--So each item being displayed is bound to an individual NavigationItemViewModel-->
                <!--The ItemTemplate lets one completely restyle a WPF control (in this case each Item in the ItemsControl.-->
                <ItemsControl.ItemTemplate>
                    <!--The DataTemplate describes the visual structure of a content control-->
                    <DataTemplate>
                        <!--The button will give us the basic functionality we are looking for (shows content and is clickable).-->
                        <Button Content="{Binding DisplayMember}"
                                Command="{Binding OpenDetailFriendViewCommand}">
                            <!--But we don't want a standard looking button, we want to full-customize it.-->
                            <Button.Template>
                                <ControlTemplate TargetType="Button">
                                    <Grid>
                                        <!--A ContentPresenter displays the content of a ContentControl (like a button).-->
                                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <!--When the control is moused over, change the cursor and make the button text bold.-->
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Cursor" Value="Hand"/>
                                            <Setter Property="FontWeight" Value="Bold"/>
                                        </Trigger>
                                        <!--When the button is clicked, return the font to normal.  The button command will fire when-->
                                        <!--the button is released.-->
                                        <Trigger Property="IsPressed" Value="True">
                                            <Setter Property="FontWeight" Value="Normal" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Button.Template>
                        </Button>
                        
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
        </ScrollViewer>
    </Grid>
</UserControl>
