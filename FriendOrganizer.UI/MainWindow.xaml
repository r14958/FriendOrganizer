<mah:MetroWindow x:Class="FriendOrganizer.UI.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:FriendOrganizer.UI"
        xmlns:view="clr-namespace:FriendOrganizer.UI.View"
        xmlns:viewModel="clr-namespace:FriendOrganizer.UI.ViewModel"
        xmlns:mah="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
        mc:Ignorable="d"
        WindowStartupLocation="CenterScreen"
        Title="FriendOrganizer" Height="700" Width="1000" FontSize="20">
    <Window.Resources>
        <!--This data template will implicitly display any content control in this Window-->
        <!--bound to an instance of the FriendDetailViewModel as a FriendDetailView.-->
        <DataTemplate DataType="{x:Type viewModel:FriendDetailViewModel}">
            <view:FriendDetailView/>
        </DataTemplate>
        <!--Same as above, expect for MeetingDetailView and MeetingDetailViewModel-->
        <DataTemplate DataType="{x:Type viewModel:MeetingDetailViewModel}">
            <view:MeetingDetailView/>
        </DataTemplate>
        <!--Same as above, expect for MeetingDetailView and MeetingDetailViewModel-->
        <DataTemplate DataType="{x:Type viewModel:ProgrammingLanguageDetailViewModel}">
            <view:ProgrammingLanguageDetailView/>
        </DataTemplate>
    </Window.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" MinWidth="200"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        
        <!--Menu Row-->
        <Menu Grid.Row="0" Grid.ColumnSpan="2" FontSize="20">
            <MenuItem Header="Create">
                <!--To create a new Friend type, pass the type of the FriendDetailViewModel-->
                <!--Note that we already defined the viewModel namespace-->
                <!--The commandParameter transmit the target Type (ViewModel) through the delegateCommand<Type>-->
                <MenuItem Header="New Friend" Command="{Binding CreateNewDetailCommand}"
                          CommandParameter="{x:Type viewModel:FriendDetailViewModel}"/>
                <MenuItem Header="New Meeting" Command="{Binding CreateNewDetailCommand}"
                          CommandParameter="{x:Type viewModel:MeetingDetailViewModel}"/>
            </MenuItem>
            <MenuItem Header="Edit">
                <MenuItem Header="Programming Languages" Command="{Binding OpenSingleDetailViewCommand}"
                          CommandParameter="{x:Type viewModel:ProgrammingLanguageDetailViewModel}"/>
            </MenuItem>
        </Menu>
        
        <!--Row 1, Left Column: Navigation Menu-->
        <view:NavigationView Grid.Row="1"
                             Grid.Column="0"
                             DataContext="{Binding NavigationViewModel}"/>
        
        <!--Row 1, Right Column: DetailView-->
        <!--This content control will be displayed as a DetailView as defined in the Windows.Resources-->
        <!--Change to TabControl to display multiple DetailViews-->
        <TabControl Grid.Row="1" 
                               Grid.Column="1" 
                               ItemsSource="{Binding DetailViewModels}"
                               SelectedItem="{Binding SelectedDetailViewModel, Mode=TwoWay}">
            <!--<TabControl.ItemContainerStyle>
                <Style TargetType="TabItem"
                       BasedOn="{StaticResource {x:Type TabItem}}">
                    <Setter Property="Background" Value="#333333"/>
                    <Setter Property="BorderBrush" Value="Transparent"/>
                    <Setter Property="BorderThickness" Value="2"/>
                </Style>
            </TabControl.ItemContainerStyle>-->
            <TabControl.ItemTemplate>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="{Binding Title}"/>
                        <TextBlock Text="*" 
                            Visibility="{Binding HasChanges,
                            Converter={StaticResource booleanToVisibilityConverter}}"/>
                        <Button Content="X" Style="{StaticResource MahApps.Styles.Button.Chromeless}"
                                Margin="2 0 2 2" FontSize="20"
                                VerticalAlignment="Top"
                                Command="{Binding CloseDetailViewCommand}"/>
                    </StackPanel>
                </DataTemplate>
            </TabControl.ItemTemplate>
        </TabControl>
    </Grid>
</mah:MetroWindow>
